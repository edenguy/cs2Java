
import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

class AutogenerateArgs {
    public String yamlPath;
    public String autogeneratedOutputPath;
    public String autogeneratedPackageName;
}

class main {

    // Parse YAML file. As response, generate Java files
    static final String YAML_FILE = System.getProperty("user.dir") + "/dataModel.yaml";
    static final String OUTPUT_MODEL_PATH = String.format("%s/../Model/src/main/java/Model/Autogenerated/", System.getProperty("user.dir"));
    static final String AUTOGENERATED_PACKAGE_NAME = "Model.Autogenerated";


    public static void main(String[] args) throws Exception {

        var model = new AutogenerateArgs();

        model.autogeneratedOutputPath = OUTPUT_MODEL_PATH;
        model.autogeneratedPackageName = AUTOGENERATED_PACKAGE_NAME;
        model.yamlPath = YAML_FILE;

        try {
            GenerateModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void GenerateModel(AutogenerateArgs args) throws Exception {

        ODMParser p = new ODMParser();

        List<String> yamlObjectDataModel = ReadYaml(args.yamlPath);

        Map<String, String> javaClasses =
                p.Parse(yamlObjectDataModel, args.autogeneratedPackageName);

        PersistClasses(javaClasses, args.autogeneratedOutputPath);

    }

    private static void PersistClasses(Map<String, String> javaClasses, String outputFolder) {
        File file = new File(outputFolder);
        if (!file.exists())
            file.mkdir();

        for (String currentClass : javaClasses.keySet()) {
            String filename = String.format("%s%s.java", outputFolder, currentClass);
            System.out.println(String.format("%s - %s", currentClass, filename));
            WriteODMClass(filename, javaClasses.get(currentClass));
        }
    }

    static void WriteODMClass(String filename, String javaSrc) {
        File f = new File(filename);
        if (f.exists())
            f.delete();

        try {
            PrintWriter out = new PrintWriter(new OutputStreamWriter(new FileOutputStream(filename)));
            out.println(javaSrc);
            out.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    }

    private static List<String> ReadYaml(String yamlPath) throws Exception{
        System.out.println(String.format("YAML file: %s",yamlPath));
        return ReadLines(yamlPath);
    }

    private static List<String> ReadLines(String fileName) throws IOException {
        return Files.readAllLines(Paths.get(fileName), StandardCharsets.UTF_8);
    }
}
